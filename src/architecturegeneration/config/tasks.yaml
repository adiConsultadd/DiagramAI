create_pdf_extraction_task:
  description: >
    Extract the complete text content from the PDF file. {pdf_url}
    Make sure to preserve the document structure as much as possible, including paragraphs, lists, and section headings. Pay special attention to maintaining the hierarchical organization of the content.
  expected_output:
    The complete text content of the PDF document with preserved structure.
    The output should contain all text from the document, organized in a way that maintains the original document flow and organization.
  agent: create_pdf_agent
  output_file: output/pdf_text.json

create_section_extraction_task:
  description: >
    Use the extracted output from the previous task present at {pdf_text_url}.
    And then identify and extract the following specific sections: {sections_to_extract}.
    For each section:
    1. Identify the section boundaries accurately
    2. Extract the complete content of each section
    3. Maintain the original formatting within each section
    4. Ensure no content from other sections is included
    The sections may be indicated by headings like "2. Problem" or simply "Problem".
  expected_output:
    '''A structured object containing the extracted sections with the following format:
    {{
    "{sections_to_extract[0]}": "[complete content of section]",
    "{sections_to_extract[1]}": "[complete content of section]",
    "{sections_to_extract[2]}": "[complete content of section]"
    }}
    Each section should contain its complete content with proper formatting preserved'''
  agent: create_section_extraction_agent
  output_file: output/extacted_text.json

create_section_json_to_steps_task:
  description: >
    Use the extracted output from the previous task present at {extracted_text_url} to convert the solution description into a structured JSON for diagram generation.  
    The JSON should follow this structure: {jsonOutput} and ensure all fields are filled in the given JSON.  

    **Key Instructions:**  
    - Identify all components, their relationships, external systems, and workflow steps from the provided solution text.  
    - Each component should have a unique ID, appropriate categorization (such as frontend, backend, database, external service, queue, workflow, etc.), and an appropriate icon name.  
    - Accurately map relationships between components as described in the solution text.  
    - Define workflow steps based on the described implementation process.  
    - Set clear and complete metadata for the diagram.  

    **Icon Assignment Rules:**  
    - If a specific technology is mentioned (such as AWS Lambda, Azure Function, PostgreSQL, Redis, etc.), use the exact technology icon from the known set.  
    - If no technology is defined, do NOT default to AWS or Azure icons.  
    - Instead, intelligently assign the most appropriate general Eraser.io icon (refer to eraser_icons.csv) based on the functional type of the component. For example:  
      - Databases ➡ use `database`  
      - Backend services ➡ use `server`  
      - Frontend applications ➡ use `html5`  
      - APIs ➡ use `api`  
      - Any unclassified system ➡ use `box`  
    - Do not use placeholder icon names like `"General-eraser.icon"`.  

    **Ensure:**  
    - No mixing of technologies in the JSON.  
    - All components and workflow steps are clearly defined and follow the architecture flow.

  expected_output: >
    A well-structured JSON object representing the architectural solution, containing all necessary information to generate a clean, accurate, and understandable diagram.

  agent: section_json_to_steps_agent
  output_file: output/diagram.json

rule_validation_task:
  description: >
    Perform a rule-based validation check on the given system architecture to ensure that:
    Reference for the incompatible teck can be found in this json. {json_url}
    No incompatible technologies are used together.
    The solution adheres to regulatory and security standards.
    The architecture follows basic compatibility guidelines.
  expected_output: >
    A list of detected violations (if any).
    A confirmation message if no violations are found.
  agent: rule_validation_agent

json_to_eraser_diagram_task:
  description: >
    Your task is to convert the provided architecture JSON present at {diagram_json_url} into 
    valid Eraser.io diagram code that follows Eraser.io's specific syntax.

    The JSON structure represents a cloud architecture with components, connections, and workflow.

    IMPORTANT: 
    - DO NOT modify or restructure the JSON input
    - DO NOT output JSON - you must output ONLY valid Eraser.io code
    - Each component in the JSON must be represented in the diagram
    - Each connection in the JSON must be represented in the diagram
    - Use the appropriate Eraser.io shape/icon for each component category
    - Follow the exact Eraser.io syntax in your knowledge base
    - Ensure the diagram layout matches the one specified in the JSON

    Before generating code, consult your knowledge base to understand:
    1. Eraser.io code structure for cloud architecture diagrams
    2. How to create groups/containers in Eraser.io
    3. How to properly define connections between components
    4. How to use the appropriate icons for each component type
  expected_output: >
    ONLY valid Eraser.io diagram code that can be directly copied into Eraser.io. 
    Do not include explanations, JSON, or anything other than the Eraser.io diagram code itself.
  agent: architecture_to_eraser_agent
  output_file: output/finalEraserCode.md
